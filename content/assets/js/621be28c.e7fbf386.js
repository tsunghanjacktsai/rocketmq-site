"use strict";(self.webpackChunkrocketmq_docs=self.webpackChunkrocketmq_docs||[]).push([[4824],{15680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>g});var n=t(96540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),d=a,g=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return t?n.createElement(g,s(s({ref:r},u),{},{components:t})):n.createElement(g,s({ref:r},u))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},19365:(e,r,t)=>{t.d(r,{A:()=>s});var n=t(96540),a=t(20053);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:r,hidden:t,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,s),hidden:t},r)}},11470:(e,r,t)=>{t.d(r,{A:()=>q});var n=t(58168),a=t(96540),o=t(20053),s=t(23104),i=t(56347),c=t(57485),l=t(31682),u=t(89466);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:r,label:t,attributes:n,default:a}}=e;return{value:r,label:t,attributes:n,default:a}}))}function m(e){const{values:r,children:t}=e;return(0,a.useMemo)((()=>{const e=r??p(t);return function(e){const r=(0,l.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function d(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function g(e){let{queryString:r=!1,groupId:t}=e;const n=(0,i.W6)(),o=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,c.aZ)(o),(0,a.useCallback)((e=>{if(!o)return;const r=new URLSearchParams(n.location.search);r.set(o,e),n.replace({...n.location,search:r.toString()})}),[o,n])]}function h(e){const{defaultValue:r,queryString:t=!1,groupId:n}=e,o=m(e),[s,i]=(0,a.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!d({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:o}))),[c,l]=g({queryString:t,groupId:n}),[p,h]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[n,o]=(0,u.Dv)(t);return[n,(0,a.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:n}),y=(()=>{const e=c??p;return d({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),l(e),h(e)}),[l,h,o]),tabValues:o}}var y=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:r,block:t,selectedValue:i,selectValue:c,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.a_)(),m=e=>{const r=e.currentTarget,t=u.indexOf(r),n=l[t].value;n!==i&&(p(r),c(n))},d=e=>{let r=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;r=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;r=u[t]??u[u.length-1];break}}r?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},r)},l.map((e=>{let{value:r,label:t,attributes:s}=e;return a.createElement("li",(0,n.A)({role:"tab",tabIndex:i===r?0:-1,"aria-selected":i===r,key:r,ref:e=>u.push(e),onKeyDown:d,onClick:m},s,{className:(0,o.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":i===r})}),t??r)})))}function b(e){let{lazy:r,children:t,selectedValue:n}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=o.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==n}))))}function v(e){const r=h(e);return a.createElement("div",{className:(0,o.A)("tabs-container",f.tabList)},a.createElement(k,(0,n.A)({},e,r)),a.createElement(b,(0,n.A)({},e,r)))}function q(e){const r=(0,y.A)();return a.createElement(v,(0,n.A)({key:String(r)},e))}},10629:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=t(58168),a=(t(96540),t(15680)),o=t(11470),s=t(19365);const i={},c="Run RocketMQ in Docker",l={unversionedId:"quickStart/02quickstartWithDocker",id:"version-5.0/quickStart/02quickstartWithDocker",title:"Run RocketMQ in Docker",description:"This section introduces how to quickly deploy a single-node, single-replica RocketMQ service using Docker and complete simple message sending and receiving.",source:"@site/i18n/en/docusaurus-plugin-content-docs/version-5.0/02-quickStart/02quickstartWithDocker.md",sourceDirName:"02-quickStart",slug:"/quickStart/02quickstartWithDocker",permalink:"/docs/quickStart/02quickstartWithDocker",draft:!1,editUrl:"https://github.com/apache/rocketmq-site/tree/new-official-website/versioned_docs/version-5.0/02-quickStart/02quickstartWithDocker.md",tags:[],version:"5.0",frontMatter:{},sidebar:"version-5.0/myAutogeneratedSidebar",previous:{title:"Run RocketMQ locally",permalink:"/docs/quickStart/01quickstart"},next:{title:"Run RocketMQ with Docker Compose",permalink:"/docs/quickStart/03quickstartWithDockercompose"}},u={},p=[{value:"1.Pull RocketMQ Image",id:"1pull-rocketmq-image",level:2},{value:"2.Create a Shared Network for Containers",id:"2create-a-shared-network-for-containers",level:2},{value:"3.Start NameServer",id:"3start-nameserver",level:2},{value:"4.Start Broker and Proxy",id:"4start-broker-and-proxy",level:2},{value:"5.Send and Receive Messages with SDK",id:"5send-and-receive-messages-with-sdk",level:2},{value:"6. Stop the Containers",id:"6-stop-the-containers",level:2}],m={toc:p},d="wrapper";function g(e){let{components:r,...t}=e;return(0,a.yg)(d,(0,n.A)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"run-rocketmq-in-docker"},"Run RocketMQ in Docker"),(0,a.yg)("p",null,"This section introduces how to quickly deploy a single-node, single-replica RocketMQ service using Docker and complete simple message sending and receiving."),(0,a.yg)("admonition",{title:"System Requirements",type:"tip"},(0,a.yg)("ol",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ol"},"64-bit operating system"),(0,a.yg)("li",{parentName:"ol"},"64-bit JDK 1.8+"))),(0,a.yg)("h2",{id:"1pull-rocketmq-image"},"1.Pull RocketMQ Image"),(0,a.yg)("p",null,"Here, we take the RocketMQ 5.3.0 version image from ",(0,a.yg)("a",{parentName:"p",href:"https://hub.docker.com/r/apache/rocketmq/tags"},"dockerhub")," as an example to introduce the deployment process."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"docker pull apache/rocketmq:5.3.0\n")),(0,a.yg)("h2",{id:"2create-a-shared-network-for-containers"},"2.Create a Shared Network for Containers"),(0,a.yg)("p",null,"RocketMQ involves multiple services and requires multiple containers. Creating a Docker network facilitates communication between containers."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"docker network create rocketmq\n")),(0,a.yg)("h2",{id:"3start-nameserver"},"3.Start NameServer"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"# Start NameServer\ndocker run -d --name rmqnamesrv -p 9876:9876 --network rocketmq apache/rocketmq:5.3.0 sh mqnamesrv\n\n# Verify if NameServer started successfully\ndocker logs -f rmqnamesrv\n")),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Once we see ",(0,a.yg)("strong",{parentName:"p"},"'The Name Server boot success..'")," from namesrv.log, it means the NameServer has been started successfully.")),(0,a.yg)("h2",{id:"4start-broker-and-proxy"},"4.Start Broker and Proxy"),(0,a.yg)("p",null,"After nameserver startup, we proceed to start the Broker and Proxy."),(0,a.yg)(o.A,{mdxType:"Tabs"},(0,a.yg)(s.A,{value:"Linux",label:"Linux",default:!0,mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-code"},'# Configure the broker\'s IP address\necho "brokerIP1=127.0.0.1" > broker.conf\n\n# Start the Broker and Proxy\ndocker run -d \\\n--name rmqbroker \\\n--network rocketmq \\\n-p 10912:10912 -p 10911:10911 -p 10909:10909 \\\n-p 8080:8080 -p 8081:8081 \\\n-e "NAMESRV_ADDR=rmqnamesrv:9876" \\\n-v ./broker.conf:/home/rocketmq/rocketmq-5.3.0/conf/broker.conf \\\napache/rocketmq:5.3.0 sh mqbroker --enable-proxy \\\n-c /home/rocketmq/rocketmq-5.3.0/conf/broker.conf\n\n# Verify if Broker started successfully\ndocker exec -it rmqbroker bash -c "tail -n 10 /home/rocketmq/logs/rocketmqlogs/proxy.log"\n'))),(0,a.yg)(s.A,{value:"Windows",label:"Windows",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-code"},'# Configure the broker\'s IP address\necho "brokerIP1=127.0.0.1" > broker.conf\n\n# Start the Broker and Proxy\ndocker run -d ^\n--name rmqbroker ^\n--net rocketmq ^\n-p 10912:10912 -p 10911:10911 -p 10909:10909 ^\n-p 8080:8080 -p 8081:8081 \\\n-e "NAMESRV_ADDR=rmqnamesrv:9876" ^\n-v %cd%\\broker.conf:/home/rocketmq/rocketmq-5.3.0/conf/broker.conf ^\napache/rocketmq:5.3.0 sh mqbroker --enable-proxy \\\n-c /home/rocketmq/rocketmq-5.3.0/conf/broker.conf\n\n# Verify if Broker started successfully\ndocker exec -it rmqbroker bash -c "tail -n 10 /home/rocketmq/logs/rocketmqlogs/proxy.log"\n')))),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Once we see ",(0,a.yg)("strong",{parentName:"p"},"'The broker","[brokerName,ip:port]"," boot success..'")," from proxy.log, it means the Broker has been started successfully.")),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Thus far, a single-Master RocketMQ cluster has been deployed, and we are able to send and receive simple messages.")),(0,a.yg)("h2",{id:"5send-and-receive-messages-with-sdk"},"5.Send and Receive Messages with SDK"),(0,a.yg)("p",null,"We can also try to use the client sdk to send and receive messages, you can see more details from ",(0,a.yg)("a",{href:"https://github.com/apache/rocketmq-clients"},"rocketmq-clients"),"."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create a java project.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Add sdk dependency to ",(0,a.yg)("em",{parentName:"p"},"pom.xml"),", remember to replace the ",(0,a.yg)("inlineCode",{parentName:"p"},"rocketmq-client-java-version")," with the ",(0,a.yg)("a",{href:"https://search.maven.org/search?q=g:org.apache.rocketmq%20AND%20a:rocketmq-client-java"},"latest release"),"."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>org.apache.rocketmq</groupId>\n    <artifactId>rocketmq-client-java</artifactId>\n    <version>${rocketmq-client-java-version}</version>\n</dependency> \n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Enter the broker container and create a Topic using mqadmin."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"$ docker exec -it rmqbroker bash\n$ sh mqadmin updatetopic -t TestTopic -c DefaultCluster\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"In the created Java project, create and run a program to send a normal message. The sample code is as follows:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-java"},'import org.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientConfigurationBuilder;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.message.Message;\nimport org.apache.rocketmq.client.apis.producer.Producer;\nimport org.apache.rocketmq.client.apis.producer.SendReceipt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProducerExample {\n    private static final Logger logger = LoggerFactory.getLogger(ProducerExample.class);\n\n    public static void main(String[] args) throws ClientException {\n        // Endpoint address, set to the Proxy address and port list, usually xxx:8080;xxx:8081\n        String endpoint = "localhost:8081";\n        // The target topic name for message sending, which needs to be created in advance.\n        String topic = "TestTopic";\n        ClientServiceProvider provider = ClientServiceProvider.loadService();\n        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);\n        ClientConfiguration configuration = builder.build();\n        // When initializing Producer, communication configuration and pre-bound Topic need to be set.\n        Producer producer = provider.newProducerBuilder()\n            .setTopics(topic)\n            .setClientConfiguration(configuration)\n            .build();\n        // Sending a normal message.\n        Message message = provider.newMessageBuilder()\n            .setTopic(topic)\n            // Set the message index key, which can be used to accurately find a specific message.\n            .setKeys("messageKey")\n            // Set the message Tag, used by the consumer to filter messages by specified Tag.\n            .setTag("messageTag")\n            // Message body\n            .setBody("messageBody".getBytes())\n            .build();\n        try {\n            // Send the message, paying attention to the sending result and catching exceptions.\n            SendReceipt sendReceipt = producer.send(message);\n            logger.info("Send message successfully, messageId={}", sendReceipt.getMessageId());\n        } catch (ClientException e) {\n            logger.error("Failed to send message", e);\n        }\n        // producer.close();\n    }\n}\n'))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"In the created Java project, create and run a program to subscribe to normal messages. Apache RocketMQ supports both ",(0,a.yg)("a",{parentName:"p",href:"https://rocketmq.apache.org/zh/docs/featureBehavior/06consumertype"},"SimpleConsumer")," and ",(0,a.yg)("a",{parentName:"p",href:"https://rocketmq.apache.org/zh/docs/featureBehavior/06consumertype"},"PushConsumer")," types of consumers. You can choose either method to subscribe to messages."))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},'import java.io.IOException;\nimport java.util.Collections;\nimport org.apache.rocketmq.client.apis.ClientConfiguration;\nimport org.apache.rocketmq.client.apis.ClientException;\nimport org.apache.rocketmq.client.apis.ClientServiceProvider;\nimport org.apache.rocketmq.client.apis.consumer.ConsumeResult;\nimport org.apache.rocketmq.client.apis.consumer.FilterExpression;\nimport org.apache.rocketmq.client.apis.consumer.FilterExpressionType;\nimport org.apache.rocketmq.client.apis.consumer.PushConsumer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class PushConsumerExample {\n    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);\n\n    private PushConsumerExample() {\n    }\n\n    public static void main(String[] args) throws ClientException, IOException, InterruptedException {\n        final ClientServiceProvider provider = ClientServiceProvider.loadService();\n        // Endpoint address, set to the Proxy address and port list, usually xxx:8080;xxx:8081\n        String endpoints = "localhost:8081";\n        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()\n            .setEndpoints(endpoints)\n            .build();\n        // Subscription message filtering rule, indicating subscription to all Tag messages.\n        String tag = "*";\n        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);\n        // Specify the consumer group the consumer belongs to, Group needs to be created in advance.\n        String consumerGroup = "YourConsumerGroup";\n        // Specify which target Topic to subscribe to, Topic needs to be created in advance.\n        String topic = "TestTopic";\n        // Initialize PushConsumer\n        PushConsumer pushConsumer = provider.newPushConsumerBuilder()\n            .setClientConfiguration(clientConfiguration)\n            // Set the consumer group\n            .setConsumerGroup(consumerGroup)\n            // Set pre-bound subscription relationship\n            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n            // Set the message listener\n            .setMessageListener(messageView -> {\n                // Handle messages and return the consumption result\n                logger.info("Consume message successfully, messageId={}", messageView.getMessageId());\n                return ConsumeResult.SUCCESS;\n            })\n            .build();\n        Thread.sleep(Long.MAX_VALUE);\n        // If PushConsumer is no longer needed, this instance can be closed.\n        // pushConsumer.close();\n    }\n}\n')),(0,a.yg)("h2",{id:"6-stop-the-containers"},"6. Stop the Containers"),(0,a.yg)("p",null,"After completing the experiment, we can stop the containers as follows."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"# Stop the NameServer container\ndocker stop rmqnamesrv\n\n# Stop the Broker container\ndocker stop rmqbroker\n")))}g.isMDXComponent=!0}}]);